
local plrs = game:GetService'Players'
local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()
local rep = game:GetService'ReplicatedStorage'
local uis = game:GetService'UserInputService'
local ts = game:GetService'TweenService'
local rs = game:GetService'RunService'.RenderStepped

local function findplr(Target)
    local name = Target
    local found = false
    for _,v in pairs(game.Players:GetPlayers()) do 
        if not found and (v.Name:lower():sub(1,#name) == name:lower() or v.DisplayName:lower():sub(1,#name) == name:lower()) then
            name = v
            found = true
        end
    end
    if name ~= nil and name ~= Target then
        return name
    end
end

local function AddCd(tool, Cd)
    local cd = Instance.new('IntValue', tool)
    cd.Name = 'ClientCD'
    game.Debris:AddItem(cd, Cd)
end

-- Función para disparar con posibilidad de fallo
local function Shoot(firstPos, nextPos, Revolver, tar)
    if Revolver:FindFirstChild'Barrel' and Revolver.Barrel:FindFirstChild'Attachment' then
        if Revolver.Barrel.Attachment:FindFirstChild'Sound' then
            local SoundClone = Revolver.Barrel.Attachment.Sound:Clone()
            SoundClone.Name = 'Uncopy'
            SoundClone.Parent = Revolver.Barrel.Attachment
            SoundClone:Play()
            game.Debris:AddItem(SoundClone, 1)
        end

local failChance = math.random(1, 100)
if failChance <= FAIL_PROBABILITY then  -- Usamos FAIL_PROBABILITY para determinar si falla
    local randomOffset = Vector3.new(
        math.random(-RANDOM_OFFSET_RANGE, RANDOM_OFFSET_RANGE), -- Desplazamiento en X
        math.random(-RANDOM_OFFSET_RANGE, RANDOM_OFFSET_RANGE), -- Desplazamiento en Y
        math.random(-RANDOM_OFFSET_RANGE, RANDOM_OFFSET_RANGE)  -- Desplazamiento en Z
    )
    nextPos = nextPos + randomOffset
end

        local FilterTable = {}
        table.insert(FilterTable, plr.Character)
        table.insert(FilterTable, game.Workspace['Target Filter'])
        for _, v in pairs(game.Workspace:GetDescendants()) do
            if v.ClassName == 'Accessory' then
                table.insert(FilterTable, v)
            end
        end
        local a_1, a_2 = game.Workspace:FindPartOnRayWithIgnoreList(Ray.new(firstPos, (nextPos - firstPos).Unit * 100), FilterTable)
        local BulletCl = rep['Revolver Bullet']:Clone()
        game.Debris:AddItem(BulletCl, 1)
        BulletCl.Parent = game.Workspace['Target Filter']
        local mg = (firstPos - a_2).Magnitude
        BulletCl.Size = Vector3.new(0.2, 0.2, mg)
        BulletCl.CFrame = CFrame.new(firstPos, nextPos) * CFrame.new(0, 0, -mg / 2)
        ts:Create(BulletCl, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
            Size = Vector3.new(0.05, 0.05, mg), 
            Transparency = 1
        }):Play()

        if a_1 then
            local expPart = Instance.new'Part'
            game.Debris:AddItem(expPart, 2)
            expPart.Name = 'Exploding Neon Part'
            expPart.Anchored = true
            expPart.CanCollide = false
            expPart.Shape = 'Ball'
            expPart.Material = Enum.Material.Neon
            expPart.BrickColor = BulletCl.BrickColor
            expPart.Size = Vector3.new(0.1, 0.1, 0.1)
            expPart.Parent = game.Workspace['Target Filter']
            expPart.Position = a_2
            ts:Create(expPart, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                Size = Vector3.new(2, 2, 2), 
                Transparency = 1
            }):Play()
            
            if Revolver:FindFirstChild'DamageRemote' and a_1.Parent:FindFirstChild'Humanoid' then
                Revolver.DamageRemote:FireServer(a_1.Parent.Humanoid)
            end
        end
    end
end

local tar
local lastPos = nil
local lastTime = nil

local function isTargetMovingFast()
    if tar and tar.Character and tar.Character:FindFirstChild("HumanoidRootPart") then
        local currentPos = tar.Character.HumanoidRootPart.Position
        local currentTime = tick()

        if lastPos then
            local distanceMoved = (currentPos - lastPos).Magnitude
            local timeElapsed = currentTime - lastTime
            local speed = distanceMoved / timeElapsed

            -- Si la velocidad es mayor que 19 studs por segundo, el objetivo se mueve rápido
            if speed > 19 then
                return true
            end
        end

        lastPos = currentPos
        lastTime = currentTime
    end
    return false
end
local plr = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local mouse = plr:GetMouse()

plr:GetMouse().KeyDown:Connect(function(key)
    if key == 'r' then
        tar = nil
        for _, v in next, workspace:GetDescendants() do
            if v.Name == 'SelectedPlayer' then
                v:Destroy()
            end
        end       
        local n_plr, dist
        local mousePos = mouse.Hit.Position
        for _, v in pairs(game.Players:GetPlayers()) do
            if v ~= plr and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (mousePos - v.Character.HumanoidRootPart.Position).Magnitude
                if (not dist or distance <= dist) and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                    dist = distance
                    n_plr = v
                end
            end
        end
        tar = n_plr
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Jugador Seleccionado",
                Text = tar.DisplayName,
                Duration = 0.3
            })

local cooldown = false
elseif key == 'q' and tar and plr.Character then
    if cooldown then return end 

    local hasRevolver = false
    local hasSword = false

    for _, v in next, plr.Character:GetDescendants() do
        if v:IsA('Tool') then
            if v.Name == 'Kawaii Revolver' and not v:FindFirstChild('ClientCD') and v:FindFirstChild('ReplicateRemote') and v:FindFirstChild('Barrel') and v.Barrel:FindFirstChild('Attachment') and tar and tar.Character and tar.Character:FindFirstChild('HumanoidRootPart') then
                hasRevolver = true
                local humanoid = plr.Character:FindFirstChildOfClass('Humanoid')
                if humanoid and humanoid.Health > 0 then
                    v.Parent = plr.Character
                    AddCd(v, 0.9) 
                    rs:wait()

                    local targetMovingFast = isTargetMovingFast()
                    if targetMovingFast then
                        local randomOffset = Vector3.new(math.random(-3, 3), math.random(-1, 1), math.random(-1, 1))
                        local randomPosition = tar.Character.HumanoidRootPart.Position + randomOffset
                        Shoot(v.Barrel.Attachment.WorldPosition, randomPosition, v)
                        v.ReplicateRemote:FireServer(randomPosition)
                    else
                        Shoot(v.Barrel.Attachment.WorldPosition, tar.Character.Torso.Position, v)
                        v.ReplicateRemote:FireServer(tar.Character.HumanoidRootPart.Position)
                         plr.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v.Fire):Play()
                    end
                end
              elseif v:IsA'Tool' and v.Name ~= 'Kawaii Revolver' and not v:FindFirstChild'ClientCD' and v:FindFirstChild'DamageRemote' and v:FindFirstChild'Cooldown' and tar and tar.Character and tar.Character:FindFirstChildOfClass'Humanoid' then                hasSword = true
                local distance = (plr.Character.HumanoidRootPart.Position - tar.Character.HumanoidRootPart.Position).Magnitude
                if distance <= MAX_SWORD_DISTANCE then
                    AddCd(v, v.Cooldown.Value)
                    if tar and plr.Character and plr.Character:FindFirstChild('HumanoidRootPart') and tar.Character:FindFirstChild('HumanoidRootPart') then
                        if v:FindFirstChild('Attack') and plr.Character:FindFirstChildOfClass('Humanoid') then
                            plr.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v.Attack):Play()
                        end
                        if v:FindFirstChild('Blade') then
                            local swingSound = v.Blade:FindFirstChild('SwingSound')
                            local hitSound = v.Blade:FindFirstChild('HitSound')
                            local failChance = math.random(1, 100)
                            if failChance <= HIT_FAIL_PROBABILITY then
                                if swingSound and swingSound:IsA('Sound') then
                                    swingSound:Play()
                                end
                                return
                            else
                                if swingSound and swingSound:IsA('Sound') then
                                    swingSound:Play()
                                end
                                wait(0.190)
                                if hitSound and hitSound:IsA('Sound') then
                                    hitSound:Play()
                                    v.DamageRemote:FireServer(tar.Character:FindFirstChildOfClass('Humanoid'))
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if not hasRevolver then
    if cooldown then return end

    local hasRevolver = false
    local hasSword = false
    for _, v in next, plr.Character:GetDescendants() do
        if v:IsA('Tool') and v.Name == 'Kawaii Revolver' then
            hasRevolver = true
            break
        end
    end
    for _, v in next, plr.Character:GetDescendants() do
            if v:IsA'Tool' and v:FindFirstChild'DamageRemote' and v:FindFirstChild'Cooldown' and tar and tar.Character and tar.Character:FindFirstChildOfClass'Humanoid' then                hasSword = true
            hasSword = true
            break
        end
    end

    local humanoid = plr.Character:FindFirstChildOfClass('Humanoid')
    if not humanoid or humanoid.Health <= 0 then
        return 
    end
    if not hasRevolver and not hasSword then
        for _, tool in next, plr.Character:GetChildren() do
            if tool:IsA('Tool') and tool.Name ~= 'Kawaii Revolver' then
                tool.Parent = plr.Backpack
            end
        end
        

        for _, v in next, plr.Backpack:GetChildren() do
            if v:IsA'Tool' and v.Name ~= 'Kawaii Revolver' and not v:FindFirstChild'ClientCD' and v:FindFirstChild'DamageRemote' and v:FindFirstChild'Cooldown' and tar and tar.Character and tar.Character:FindFirstChildOfClass'Humanoid' then                
                hasSword = true
                v.Parent = plr.Character
                hasSword = true
                local distance = (plr.Character.HumanoidRootPart.Position - tar.Character.HumanoidRootPart.Position).Magnitude
                if distance <= MAX_SWORD_DISTANCE then
                    AddCd(v, v.Cooldown.Value)
                    if tar and plr.Character and plr.Character:FindFirstChild('HumanoidRootPart') and tar.Character:FindFirstChild('HumanoidRootPart') then
                        if v:FindFirstChild('Attack') and plr.Character:FindFirstChildOfClass('Humanoid') then
                            plr.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v.Attack):Play()
                        end
                        if v:FindFirstChild('Blade') then
                            local swingSound = v.Blade:FindFirstChild('SwingSound')
                            local hitSound = v.Blade:FindFirstChild('HitSound')
                            local failChance = math.random(1, 100)
                            if failChance <= HIT_FAIL_PROBABILITY then
                                if swingSound and swingSound:IsA('Sound') then
                                    swingSound:Play()
                                end
                                return
                            else
                                if swingSound and swingSound:IsA('Sound') then
                                    swingSound:Play()
                                end
                                wait(0.190)
                                if hitSound and hitSound:IsA('Sound') then
                                    hitSound:Play()
                                    v.DamageRemote:FireServer(tar.Character:FindFirstChildOfClass('Humanoid'))
                                            end
                                        end
                                    end
                                end
                            end
                        break
                    end
                end
            end
        end
    end
end)
